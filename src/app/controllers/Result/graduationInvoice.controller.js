const { HttpResponse } = require('@helpers');
const {
  graduationListService,
  metadataValueService,
  graduationFeesService,
  studentService,
} = require('@services/index');
const { isEmpty } = require('lodash');
const model = require('@models');
const { getMetadataValueId } = require('@controllers/Helpers/programmeHelper');

const http = new HttpResponse();

class GraduationInvoiceController {
  /**
   *
   * @param {*} req
   * @param {*} res
   */
  async generateGraduationInvoice(req, res) {
    try {
      const data = req.body;

      if (!data.grad_academic_year_id || !data.student_programme_id) {
        throw new Error('Invalid Data Request.');
      }

      const insertion = [];

      const studentId = req.user.id;
      //  const studentId = 90756;

      const student = await studentService.findOneStudentProgramme({
        where: {
          student_id: studentId,
          id: data.student_programme_id,
        },
        attributes: [
          'id',
          'student_id',
          'campus_id',
          'intake_id',
          'student_number',
          'programme_id',
          'billing_category_id',
        ],
        include: {
          association: 'programme',
          attributes: ['id', 'programme_study_level_id'],
        },
        raw: true,
        nest: true,
      });

      if (!student) {
        throw new Error('Unable To Find This Student.');
      }

      // find graduation Invoice

      const gradInvoiceCheck =
        await graduationFeesService.findOneGraduationFeesInvoice({
          where: {
            student_id: studentId,
            student_programme_id: data.student_programme_id,
          },
          raw: true,
          nest: true,
        });

      if (gradInvoiceCheck) {
        throw new Error(
          'Graduation Invoice Already Exits: Please check Your Invoices'
        );
      }

      //   const context = {
      //     student: student.student_number,
      //     campus_id: student.campus_id,
      //     intake_id: student.intake_id,
      //   };
      //   const studentData = await graduationListService.searchSingleStudent(
      //     context
      //   );

      //   if (!student) {
      //     throw new Error('Academic Record Does Not Exist.');
      //   }

      //   // student finale year ..
      //   const programmeData = { programme_id: studentData.programme_id };

      //   //  maxProgrammeStudyYear
      //   const finalStudyYear = await graduationListService.maxProgrammeStudyYear(
      //     programmeData
      //   );

      //   if (
      //     finalStudyYear.programme_study_year_id !==
      //     studentData.metadata_study_year_id
      //   ) {
      //     throw new Error(
      //       `Current Study Year  ${studentData.current_study_year}. Invoice can only be generated by finalists`
      //     );
      //   }

      const metadataValues = await metadataValueService.findAllMetadataValues({
        include: {
          association: 'metadata',
          attributes: ['id', 'metadata_name'],
        },
        attributes: ['id', 'metadata_value'],
      });

      await model.sequelize.transaction(async (transaction) => {
        if (student) {
          const studentName = `Student With Student Number: ${student.student_number}`;

          const findGraduationFeeAmounts = await graduationFeesService
            .findOneGraduationFees({
              where: {
                grad_academic_year_id: data.grad_academic_year_id,
                campus_id: student.campus_id,
                billing_category_id: student.billing_category_id,
                programme_study_level_id:
                  student.programme.programme_study_level_id,
              },
              include: [
                {
                  association: 'graduationFeesElements',
                  include: [
                    {
                      association: 'currency',
                    },
                  ],
                },
              ],
              nest: true,
            })
            .then(function (res) {
              if (res) {
                const result = res.toJSON();

                return result;
              }
            });

          if (!findGraduationFeeAmounts) {
            throw new Error(
              `Unable To Find A Graduation Fees Context Matching ${studentName}.`
            );
          }

          const findMandatoryInvoiceTypeId = getMetadataValueId(
            metadataValues,
            'MANDATORY',
            'INVOICE TYPES'
          );

          const findActiveInvoiceStatusId = getMetadataValueId(
            metadataValues,
            'ACTIVE',
            'INVOICE STATUSES'
          );

          data.invoice_type_id = findMandatoryInvoiceTypeId;
          data.invoice_status_id = findActiveInvoiceStatusId;
          //   data.grad_list_id = contextId;
          data.student_id = studentId;
          data.student_programme_id = data.student_programme_id;
          data.description = 'Graduation Fees';
          data.currency =
            findGraduationFeeAmounts.graduationFeesElements[0].currency.metadata_value;

          data.graduationInvoiceFeesElement = [];

          if (!isEmpty(findGraduationFeeAmounts.graduationFeesElements)) {
            findGraduationFeeAmounts.graduationFeesElements.forEach(
              (element) => {
                data.graduationInvoiceFeesElement.push({
                  fees_element_id: element.fees_element_id,
                  currency:
                    findGraduationFeeAmounts.graduationFeesElements[0].currency
                      .metadata_value,
                  amount: element.amount,
                });
              }
            );
          }

          const response =
            await graduationFeesService.generateGraduationFeesInvoice(
              data,
              transaction
            );

          //   await graduationListService.updateFinalGraduationList(
          //     contextId,
          //     {
          //       has_been_billed: true,
          //     },
          //     transaction
          //   );

          insertion.push(response);
        }
      });

      http.setSuccess(200, 'Graduation Fees Invoice Generated Successfully.', {
        data: insertion,
      });

      return http.send(res);
    } catch (error) {
      http.setError(400, 'Unable To Generate Graduation Fees Invoice.', {
        error: error.message,
      });

      return http.send(res);
    }
  }
}
module.exports = GraduationInvoiceController;
